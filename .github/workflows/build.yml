name: build

on:
  workflow_dispatch:
    inputs:
      test_build:
        description: 'Test build'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false
      fake_build:
        description: 'Fake build'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false
      max_speed:
        description: 'Build with max speed'
        required: false
        default: 'true'
        type: choice
        options:
        - true
        - false
  push:
    tags:
      - v[0-9]+*

env:
  TEST_BUILD: ${{ github.event.inputs.test_build == 'true' }}
  FAKE_BUILD: ${{ github.event.inputs.fake_build == 'true' }}
  MAX_SPEED: ${{ github.event.inputs.max_speed != 'false' }}
  TAG_SUFFIX: ${{ github.event.inputs.fake_build == 'true' && '-fake' || github.event.inputs.test_build == 'true' && '-test' || '' }}
  REPO_URL: https://github.com/kozhini/zapret-openwrt
  REPO_LNK: kozhini/zapret-openwrt
  REPO_BRANCH: master
  BUILD_ROOT: ${{ github.workspace }}/builder
  BUILD_DATE: unknown
  REPO_DATE: unknown
  LUCI_ARCH: aarch64_cortex-a53

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.gh.outputs.tag }}
      date: ${{ steps.gh.outputs.date }}
      sha: ${{ steps.gh.outputs.sha }}
      url: ${{ steps.gh.outputs.url }}
      message: ${{ steps.gh.outputs.message }}
      build_date: ${{ steps.gh.outputs.build_date }}
      fw_date: ${{ steps.gh.outputs.fw_date }}
      is_active: ${{ steps.activity.outputs.is_active }}
      test_build: ${{ env.TEST_BUILD }}
      fake_build: ${{ env.FAKE_BUILD }}
    steps:
      - name: Get repo data via GH API
        id: gh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH=$(gh api repos/$REPO_LNK --jq '.default_branch')
          REPO_DATE=$(gh api repos/$REPO_LNK/commits/$BRANCH --jq '.commit.committer.date')
          BUILD_DATE=$( date --utc +'%Y%m%d' )
          FW_DATE=$( date --utc +'%Y-%m-%d' )
          {
            echo "tag=$GITHUB_REF_NAME"
            echo "date=$(date --utc -d $REPO_DATE +%Y%m%d)"
            echo "sha=$(gh api repos/$REPO_LNK/commits/$BRANCH --jq '.sha[0:7]')"
            echo "url=$(gh api repos/$REPO_LNK/commits/$BRANCH --jq '.html_url')"
            echo "message<<EOF"
            gh api repos/$REPO_LNK/commits/$BRANCH --jq '.commit.message'
            echo EOF
            echo "build_date=$BUILD_DATE"
            echo "fw_date=$FW_DATE"
          } >> $GITHUB_OUTPUT
          echo "REPO_DATE=$REPO_DATE" >> $GITHUB_ENV

      - name: Check for repo activity
        id: activity
        env:
          REPO_DATE: ${{ env.REPO_DATE }}
        run: |
          TIMESTAMP=$(date --utc -d $REPO_DATE +%s)
          DAYS=$(( ( $(date --utc +%s) - $TIMESTAMP ) / 86400 ))
          if [ "${{ github.event_name }}" != "schedule" ] || [[ $DAYS -lt 1 ]]; then
            is_active=true
          else
            is_active=false
          fi
          echo "is_active=$is_active" >> $GITHUB_OUTPUT

  build:
    needs: check
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
    strategy:
      fail-fast: false
      matrix:
        branch: [ openwrt-24.10 ]
        arch:
          - aarch64_cortex-a53
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_LNK }}
          path: zapret-openwrt

      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y build-essential git subversion libncurses5-dev zlib1g-dev gawk flex gettext wget unzip python3 python3-distutils rsync file clang llvm libelf-dev

      - name: Prepare OpenWrt SDK
        run: |
          git clone --depth 1 -b openwrt-24.10 https://github.com/openwrt/openwrt.git /builder
          cd /builder
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Copy zapret packages
        run: |
          cp -r $GITHUB_WORKSPACE/zapret-openwrt/package/zapret-openwrt /builder/package/

      - name: Build packages
        working-directory: /builder
        run: |
          make defconfig
          sed -i 's/CONFIG_LUCI_JSMIN=y/CONFIG_LUCI_JSMIN=n/g' .config
          PKGLIST=`echo package/zapret-openwrt/{zapret,zapret-tpws,zapret-mdig,zapret-ip2net,luci-app-zapret}/compile`
          make -j$(($(nproc)+1)) $PKGLIST V=s CONFIG_CCACHE=1

      - name: Collect build output
        run: |
          mkdir -p $GITHUB_WORKSPACE/ipk-${{ matrix.arch }}
          cp -R ./bin/packages/*/base/. $GITHUB_WORKSPACE/ipk-${{ matrix.arch }}/

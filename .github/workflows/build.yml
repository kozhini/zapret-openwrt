name: build

on:
  workflow_dispatch:
    inputs:
      test_build:
        description: 'Test build'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false
      fake_build:
        description: 'Fake build'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false
      max_speed:
        description: 'Build with max speed'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false
  push:
    tags:
      - v[0-9]+*

env:
  REPO_URL: https://github.com/kozhini/zapret-openwrt
  REPO_LNK: kozhini/zapret-openwrt
  REPO_BRANCH: test
  BUILD_ROOT: ${{ github.workspace }}/builder
  BUILD_DATE: unknown
  REPO_DATE: unknown
  LUCI_ARCH: aarch64_cortex-a53

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.gh.outputs.tag }}
      date: ${{ steps.gh.outputs.date }}
      sha: ${{ steps.gh.outputs.sha }}
      url: ${{ steps.gh.outputs.url }}
      message: ${{ steps.gh.outputs.message }}
      build_date: ${{ steps.gh.outputs.build_date }}
      fw_date: ${{ steps.gh.outputs.fw_date }}
      is_active: ${{ steps.activity.outputs.is_active }}
      test_build: ${{ github.event.inputs.test_build }}
      fake_build: ${{ github.event.inputs.fake_build }}
    steps:
      - name: Get repo data via GH API
        id: gh
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="test"
          REPO_DATE=$(gh api repos/$REPO_LNK/commits/$BRANCH --jq '.commit.committer.date')
          BUILD_DATE=$( date --utc +'%Y%m%d' )
          FW_DATE=$( date --utc -d "$REPO_DATE" +'%Y-%m-%d' )
          {
            echo "tag=$GITHUB_REF_NAME"
            echo "date=$(date --utc -d $REPO_DATE +%Y%m%d)"
            echo "sha=$(gh api repos/$REPO_LNK/commits/$BRANCH --jq '.sha[0:7]')"
            echo "url=$(gh api repos/$REPO_LNK/commits/$BRANCH --jq '.html_url')"
            echo "message<<EOF"
            gh api repos/$REPO_LNK/commits/$BRANCH --jq '.commit.message'
            echo EOF
            echo "build_date=$BUILD_DATE"
            echo "fw_date=$FW_DATE"
          } >> $GITHUB_OUTPUT
          echo "REPO_DATE=$REPO_DATE" >> $GITHUB_ENV

      - name: Check for repo activity
        id: activity
        shell: bash
        env:
          REPO_DATE: ${{ env.REPO_DATE }}
          URL: ${{ steps.gh.outputs.url }}
        run: |
          TIMESTAMP=$(date --utc -d $REPO_DATE +%s)
          DAYS=$(( ( $(date --utc +%s) - $TIMESTAMP ) / 86400 ))
          if [ "${{ github.event_name }}" != "schedule" ] || [[ $DAYS -lt 1 ]]; then
            is_active=true
          else
            is_active=false
          fi
          echo "is_active=$is_active" >> $GITHUB_OUTPUT

  build:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch: [ openwrt-24.10 ]
        arch: [ aarch64_cortex-a53 ]
    container:
      image: openwrt/sdk:${{ matrix.arch }}-${{ matrix.branch }}
      options: --user root
    outputs:
      pkgver: ${{ steps.build.outputs.pkgver }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_LNK }}
          ref: test
          path: zapret-openwrt

      - name: Verify checkout
        shell: bash
        run: |
          echo "=== Checking checkout result ==="
          if [ -d "zapret-openwrt" ]; then
            echo "zapret-openwrt directory exists"
            ls -la zapret-openwrt/
          else
            echo "zapret-openwrt directory does not exist!"
            ls -la
            exit 1
          fi

      - name: Setup OpenWrt SDK
        working-directory: /builder
        shell: bash
        run: |
          gpg --verbose --import <(wget -qO- 'https://git.openwrt.org/?p=keyring.git;a=blob_plain;f=gpg/0x1D53D1877742E911.asc')
          sed -i 's/gpg --/#gpg --/g' setup.sh
          sed -r -i 's/^rm.+//' setup.sh
          ./setup.sh
          echo "PKGTYPE=ipk" >> $GITHUB_ENV

      - name: Install clang for eBPF compilation
        working-directory: /builder
        shell: bash
        run: |
          echo "=== Installing clang for eBPF compilation ==="
          # Обновляем пакеты и устанавливаем clang
          apt-get update
          apt-get install -y clang llvm-dev
          
          # Проверяем установку
          clang --version || echo "clang installation failed"
          which clang || echo "clang not found in PATH"

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: '/builder/.ccache'
          key: ccache-${{ matrix.arch }}-${{ matrix.branch }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ matrix.arch }}-${{ matrix.branch }}-

      - name: Init packages
        id: init
        working-directory: '/builder'
        shell: bash
        run: |
          echo "=== Debug information ==="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "REPO_LNK: ${{ env.REPO_LNK }}"
          
          PKGDIR=$GITHUB_WORKSPACE/zapret-openwrt
          echo "PKGDIR: $PKGDIR"
          
          echo "=== Checking if PKGDIR exists ==="
          if [ -d "$PKGDIR" ]; then
            echo "PKGDIR exists"
            ls -la "$PKGDIR"
          else
            echo "PKGDIR does not exist!"
            echo "Contents of GITHUB_WORKSPACE:"
            ls -la "$GITHUB_WORKSPACE"
            exit 1
          fi
          
          echo "=== Creating package directory ==="
          mkdir -p ./package/zapret-openwrt/
          
          echo "=== Copying files ==="
          cp -vr "$PKGDIR"/* ./package/zapret-openwrt/ || {
            echo "Copy failed with exit code: $?"
            exit 1
          }
          
          echo "=== Verifying copied files ==="
          ls -la ./package/zapret-openwrt/
          
          mv feeds.conf.default feeds.conf
          sed -i -e 's|base.*\.git|base https://github.com/openwrt/openwrt.git|' feeds.conf
          sed -i -e 's|packages.*\.git|packages https://github.com/openwrt/packages.git|' feeds.conf
          sed -i -e 's|luci.*\.git|luci https://github.com/openwrt/luci.git|' feeds.conf
          mkdir -p ./logs
          if [ "${{ needs.check.outputs.test_build }}" != "true" ] && [ "${{ needs.check.outputs.fake_build }}" != "true" ]; then
              echo "=== Updating feeds ==="
              ./scripts/feeds update base packages luci
              echo "=== Installing feeds ==="
              ./scripts/feeds install -a
          fi
          PKGVER=$( grep -s '^PKG_VERSION:=.*' $PKGDIR/luci-app-zapret/Makefile | cut -d'=' -f2 )
          echo "PKGVER=$PKGVER" >> $GITHUB_ENV
          echo "pkgver=$PKGVER" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
          echo "=== Init completed successfully ==="

      - name: Check init status
        shell: bash
        run: |
          echo "=== Init step outputs ==="
          echo "status: ${{ steps.init.outputs.status }}"
          echo "pkgver: ${{ steps.init.outputs.pkgver }}"
          
          if [ "${{ steps.init.outputs.status }}" != "success" ]; then
            echo "Init step did not complete successfully!"
            exit 1
          fi

      - name: Verify packages before build
        working-directory: '/builder'
        shell: bash
        run: |
          echo "=== Verifying package structure ==="
          
          PKGDIR="./package/zapret-openwrt"
          if [ ! -d "$PKGDIR" ]; then
              echo "ERROR: Package directory $PKGDIR does not exist!"
              exit 1
          fi
          
          echo "Package directory contents:"
          ls -la "$PKGDIR"
          
          # Проверяем каждый пакет
          for pkg in zapret zapret-tpws zapret-mdig zapret-ip2net luci-app-zapret zapret-ebpf; do
              echo "--- Checking $pkg ---"
              pkgdir="$PKGDIR/$pkg"
              
              if [ ! -d "$pkgdir" ]; then
                  echo "ERROR: Package directory $pkgdir does not exist!"
                  continue
              fi
              
              echo "Package $pkg contents:"
              ls -la "$pkgdir"
              
              if [ -f "$pkgdir/Makefile" ]; then
                  echo "Makefile for $pkg:"
                  echo "PKG_VERSION: $(grep '^PKG_VERSION:=' "$pkgdir/Makefile" || echo 'NOT FOUND')"
                  echo "PKG_SOURCE: $(grep '^PKG_SOURCE:=' "$pkgdir/Makefile" || echo 'NOT FOUND')"
                  echo "DEPENDS: $(grep '^DEPENDS:=' "$pkgdir/Makefile" || echo 'NOT FOUND')"
              else
                  echo "ERROR: Makefile not found for $pkg"
              fi
          done
          
          echo "=== Checking feeds ==="
          if [ -f "feeds.conf" ]; then
              echo "Feeds configuration:"
              cat feeds.conf
          else
              echo "ERROR: feeds.conf not found!"
          fi
          
          echo "=== Checking .config ==="
          if [ -f ".config" ]; then
              echo ".config exists"
          else
              echo ".config does not exist (will be created by defconfig)"
          fi

      - name: Debug build variables
        working-directory: '/builder'
        shell: bash
        run: |
          echo "=== Build variables ==="
          echo "PKGVER: $PKGVER"
          echo "PKGTYPE: $PKGTYPE"
          echo "test_build: ${{ needs.check.outputs.test_build }}"
          echo "fake_build: ${{ needs.check.outputs.fake_build }}"
          echo "matrix.arch: ${{ matrix.arch }}"
          echo "matrix.branch: ${{ matrix.branch }}"
          
          echo "=== Environment variables ==="
          env | grep -E "(PKG|BUILD|REPO)" || echo "No relevant env vars found"

      - name: Build packages
        id: build
        if: steps.init.outputs.status == 'success'
        working-directory: '/builder'
        shell: bash
        run: |
          # Принудительно включить логирование
          set -x  # Показывать все команды
          exec 2>&1  # Перенаправить stderr в stdout
          
          echo "=== Starting build process ==="
          echo "Current directory: $(pwd)"
          echo "Contents:"
          ls -la
          
          # Создаем директорию для логов и настраиваем логирование
          mkdir -p ./logs
          echo "=== Build started at $(date) ===" > ./logs/build.log
          
          MAKE_JOBS=1
          if [ "${{ needs.check.outputs.test_build }}" != "true" ] && [ "${{ needs.check.outputs.fake_build }}" != "true" ]; then
              echo "=== Running real build ===" | tee -a ./logs/build.log
              
              echo "=== Making defconfig ===" | tee -a ./logs/build.log
              make defconfig 2>&1 | tee -a ./logs/defconfig.log || {
                  echo "defconfig failed with exit code: $?" | tee -a ./logs/build.log
                  echo "defconfig failed with exit code: $?"
                  exit 1
              }
              
              echo "=== Modifying config ===" | tee -a ./logs/build.log
              sed -i 's/CONFIG_LUCI_JSMIN=y/CONFIG_LUCI_JSMIN=n/g' .config 2>&1
              
              echo "=== Building main packages ===" | tee -a ./logs/build.log
              # Сначала собираем основные пакеты без zapret-ebpf
              PKGLIST_MAIN=`echo package/zapret-openwrt/{zapret,zapret-tpws,zapret-mdig,zapret-ip2net,luci-app-zapret}/compile`
              echo "Main package list: $PKGLIST_MAIN" | tee -a ./logs/build.log
              
              # Запускаем сборку основных пакетов
              make -j$MAKE_JOBS $PKGLIST_MAIN V=s CONFIG_CCACHE=1 2>&1 | tee -a ./logs/make.log || {
                  BUILD_EXIT_CODE=$?
                  echo "Main build failed with exit code: $BUILD_EXIT_CODE" | tee -a ./logs/build.log
                  exit $BUILD_EXIT_CODE
              }
              
              echo "=== Building zapret-ebpf separately ===" | tee -a ./logs/build.log
              # Проверяем наличие clang
              if command -v clang >/dev/null 2>&1; then
                  echo "clang found, building zapret-ebpf" | tee -a ./logs/build.log
                  make -j$MAKE_JOBS package/zapret-openwrt/zapret-ebpf/compile V=s CONFIG_CCACHE=1 2>&1 | tee -a ./logs/ebpf.log || {
                      EBPF_EXIT_CODE=$?
                      echo "zapret-ebpf build failed with exit code: $EBPF_EXIT_CODE" | tee -a ./logs/build.log
                      echo "zapret-ebpf build failed, but continuing..." | tee -a ./logs/build.log
                  }
              else
                  echo "clang not found, skipping zapret-ebpf" | tee -a ./logs/build.log
              fi
          else
              echo "=== Running fake build ===" | tee -a ./logs/build.log
              OUT_DIR=./bin/packages/dev_x/base
              mkdir -p $OUT_DIR
              touch $OUT_DIR/zapret_$PKGVER-${{ matrix.arch }}.ipk
              touch $OUT_DIR/luci-app-zapret_$PKGVER-all.ipk
              touch $OUT_DIR/zapret-ebpf_$PKGVER-${{ matrix.arch }}.ipk
          fi
          
          echo "=== Build completed successfully at $(date) ===" | tee -a ./logs/build.log
          OUTDIR=$GITHUB_WORKSPACE/$PKGTYPE-${{ matrix.arch }}
          mkdir -p $OUTDIR
          cp -R ./bin/packages/*/base/. $OUTDIR/
          echo "OUTDIR=$OUTDIR" >> $GITHUB_ENV
          echo "pkgver=$PKGVER" >> $GITHUB_OUTPUT

      - name: Save all logs
        if: always()
        shell: bash
        run: |
          echo "=== Saving all available logs ==="
          
          # Проверяем и создаем директорию для логов
          LOGDIR="/builder/logs"
          echo "Checking log directory: $LOGDIR"
          
          if [ -d "$LOGDIR" ]; then
              echo "Log directory exists, contents:"
              ls -la "$LOGDIR"
              
              # Копируем все логи из директории
              if [ "$(ls -A $LOGDIR)" ]; then
                  echo "Logs found, copying..."
                  cp -r "$LOGDIR"/* . || echo "Failed to copy logs"
              else
                  echo "Log directory is empty"
              fi
          else
              echo "Log directory does not exist, creating..."
              mkdir -p "$LOGDIR"
          fi
          
          # Проверяем наличие логов в текущей директории
          echo "=== Checking for logs in current directory ==="
          ls -la *.log 2>/dev/null || echo "No .log files found"
          
          # Проверяем наличие логов в рабочей директории
          echo "=== Checking for logs in working directory ==="
          if [ -d "/builder" ]; then
              find /builder -name "*.log" -type f 2>/dev/null | head -10 || echo "No log files found in /builder"
          fi
          
          # Создаем общий лог с информацией о сборке
          {
              echo "=== Build Summary ==="
              echo "Date: $(date)"
              echo "Architecture: ${{ matrix.arch }}"
              echo "Branch: ${{ matrix.branch }}"
              echo "Test build: ${{ needs.check.outputs.test_build }}"
              echo "Fake build: ${{ needs.check.outputs.fake_build }}"
              echo "PKGVER: $PKGVER"
              echo "Build exit code: ${{ steps.build.outcome }}"
              echo "=== End Summary ==="
          } > build-summary.log

      - name: Compress build logs
        if: always()
        shell: bash
        run: |
          echo "=== Compressing build logs ==="
          
          # Создаем архив со всеми доступными логами
          if [ -f "build-summary.log" ]; then
              echo "Found build-summary.log, including in archive"
              tar -cJvf logs-${{ matrix.branch }}-${{ matrix.arch }}.tar.xz build-summary.log
          fi
          
          # Добавляем все .log файлы в архив
          if ls *.log 1> /dev/null 2>&1; then
              echo "Found .log files, adding to archive"
              tar -cJvf logs-${{ matrix.branch }}-${{ matrix.arch }}.tar.xz *.log
          else
              echo "No .log files found"
              # Создаем архив с информацией об ошибке
              echo "Build failed - no log files generated" > build-error.txt
              tar -cJvf logs-${{ matrix.branch }}-${{ matrix.arch }}.tar.xz build-error.txt
          fi
          
          echo "Archive contents:"
          tar -tvf logs-${{ matrix.branch }}-${{ matrix.arch }}.tar.xz

      - name: Upload packages
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@main
        with:
          path: ${{ env.OUTDIR }}
          name: zapret,ipk,${{ matrix.arch }}
          if-no-files-found: error

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          path: |
            logs-*.tar.xz
            *.log
            build-summary.log
          name: logs-${{ matrix.branch }}-${{ matrix.arch }}

  release:
    needs: [ check, build ]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: zapret,ipk,*

      - name: Prepare package files for release
        shell: bash
        run: |
          mkdir -p release_files
          find . -type f -name "*.ipk" | while read file; do
            arch=$(echo "$file" | grep -oP 'zapret,ipk,\K[^/]+')
            filename=$(basename "$file")
            cp "$file" "release_files/${arch}_${filename}"
          done
          ls -lh ./release_files/

      - name: Upload individual package files
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: ${{ needs.check.outputs.test_build == 'true' || needs.check.outputs.fake_build == 'true' }}
          tag_name: v${{ needs.build.outputs.pkgver }}${{ env.TAG_SUFFIX }}
          name: zapret v${{ needs.build.outputs.pkgver }}
          body: |
            zapret v${{ needs.build.outputs.pkgver }} for OpenWrt
            Individual IPK package files for aarch64_cortex-a53 architecture:
            - All files with `aarch64_cortex-a53_` prefix are for aarch64_cortex-a53 architecture
            - All files are `.ipk` packages for OpenWrt 24.10
          files: ./release_files/*

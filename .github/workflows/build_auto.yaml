name: Build Zapret Packages

on:
  # –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ó–ê–ü–£–°–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ upstream-—Ä–µ–ª–∏–∑–∞ –≤ 03:15 UTC.
  schedule:
    - cron: '15 3 * * *' 
  
  # –†–£–ß–ù–û–ô –ó–ê–ü–£–°–ö: –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
  workflow_dispatch:
    inputs:
      test_build:
        description: 'Test build'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false
      fake_build:
        description: 'Fake build'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false
      max_speed:
        description: 'Build with max speed'
        required: false
        default: 'true'
        type: choice
        options:
        - true
        - false

env:
  # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π-–∏—Å—Ç–æ—á–Ω–∏–∫ (Upstream)
  UPSTREAM_REPO: bol-van/zapret
  # –í–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Å–±–æ—Ä–∫–∏
  REPO_LNK: kozhini/zapret-openwrt 
  
  TEST_BUILD: ${{ github.event.inputs.test_build == 'true' }}
  FAKE_BUILD: ${{ github.event.inputs.fake_build == 'true' }}
  MAX_SPEED: ${{ github.event.inputs.max_speed != 'false' }}
  TAG_SUFFIX: ${{ github.event.inputs.fake_build == 'true' && '-fake' || github.event.inputs.test_build == 'true' && '-test' || '' }}
  
  # REPO_URL –±—ã–ª —É–¥–∞–ª–µ–Ω, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É. –û–Ω –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
  
  REPO_BRANCH: master
  BUILD_ROOT: ${{ github.workspace }}/builder
  BUILD_DATE: unknown
  REPO_DATE: unknown
  LUCI_ARCH: aarch64_cortex-a53

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.gh_upstream.outputs.tag }} 
      date: ${{ steps.gh_upstream.outputs.date }}
      sha: ${{ steps.gh_upstream.outputs.sha }}
      url: ${{ steps.gh_upstream.outputs.url }}
      message: ${{ steps.gh_upstream.outputs.message }}
      build_date: ${{ steps.gh_upstream.outputs.build_date }}
      fw_date: ${{ steps.gh_upstream.outputs.fw_date }}
      is_active: ${{ steps.gh_upstream.outputs.should_build }} # –ò—Å–ø–æ–ª—å–∑—É–µ–º should_build –∫–∞–∫ is_active
      test_build: ${{ env.TEST_BUILD }}
      fake_build: ${{ env.FAKE_BUILD }}
      should_build: ${{ steps.gh_upstream.outputs.should_build }} 
      
    steps:
      - name: Get Upstream Release Data and Check for New Version
        id: gh_upstream
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BUILD_DATE=$( date --utc +'%Y%m%d' )
          FW_DATE=$( date --utc +'%Y-%m-%d' )
          SHOULD_BUILD=false
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # --- –†–£–ß–ù–û–ô –ó–ê–ü–£–°–ö ---
            echo "Workflow dispatched manually. Forcing build."
            TAG_NAME="manual-build-$(date +%Y%m%d%H%M)"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ SHA
            COMMIT_DATA=$(gh api repos/${{ env.REPO_LNK }}/commits/$REPO_BRANCH)
            COMMIT_SHA=$(echo $COMMIT_DATA | jq -r '.sha[0:7]')
            COMMIT_URL=$(echo $COMMIT_DATA | jq -r '.html_url')
            COMMIT_DATE=$(echo $COMMIT_DATA | jq -r '.commit.committer.date')
            MESSAGE="Manual build triggered on commit $COMMIT_SHA."
            SHOULD_BUILD=true
            
          elif [ "${{ github.event_name }}" == "schedule" ]; then
            # --- –ó–ê–ü–£–°–ö –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ (–ü–†–û–í–ï–†–ö–ê) ---
            echo "Checking latest release in ${{ env.UPSTREAM_REPO }}..."
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –†–ï–õ–ò–ó (–Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–≥) –∏–∑ Upstream
            RELEASE_DATA=$(gh api repos/${{ env.UPSTREAM_REPO }}/releases/latest --jq '{tag_name, target_commitish, published_at, html_url, body}')
            
            UPSTREAM_TAG=$(echo $RELEASE_DATA | jq -r '.tag_name')
            UPSTREAM_COMMIT_SHA=$(echo $RELEASE_DATA | jq -r '.target_commitish' | cut -c1-7)
            UPSTREAM_DATE=$(echo $RELEASE_DATA | jq -r '.published_at')
            COMMIT_URL=$(echo $RELEASE_DATA | jq -r '.html_url')
            MESSAGE=$(echo $RELEASE_DATA | jq -r '.body' | head -n 1)

            TAG_NAME=$UPSTREAM_TAG
            COMMIT_SHA=$UPSTREAM_COMMIT_SHA
            COMMIT_DATE=$UPSTREAM_DATE
            
            echo "Latest Upstream Tag: $UPSTREAM_TAG"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–ª–∏–∑ —Å —Ç–∞–∫–∏–º –∂–µ —Ç–µ–≥–æ–º –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (kozhini/zapret)
            TAG_EXISTS=$(gh api repos/${{ github.repository }}/releases/tags/$UPSTREAM_TAG --silent --fail || echo "NOT_FOUND")
            
            if [ "$TAG_EXISTS" != "NOT_FOUND" ]; then
              echo "‚úÖ Release tag $UPSTREAM_TAG already exists in ${{ github.repository }}. Skipping build."
              SHOULD_BUILD=false
            else
              echo "üöÄ New release tag $UPSTREAM_TAG found! Starting build."
              SHOULD_BUILD=true
            fi
          fi
          
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          REPO_DATE=$( date --utc -d "$COMMIT_DATE" +%Y%m%d )
          
          {
            echo "tag=$TAG_NAME"
            echo "date=$REPO_DATE"
            echo "sha=$COMMIT_SHA"
            echo "url=$COMMIT_URL"
            echo "message<<EOF"
            echo "$MESSAGE"
            echo EOF
            echo "build_date=$BUILD_DATE"
            echo "fw_date=$FW_DATE"
            echo "should_build=$SHOULD_BUILD"
          } >> $GITHUB_OUTPUT
          
          echo "REPO_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          
      - name: Log if Build is Skipped
        if: steps.gh_upstream.outputs.should_build == 'false'
        run: |
          echo "Skipping build and release jobs as the upstream tag already exists locally."
          
  build:
    needs: check
    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ 'should_build' == true
    if: needs.check.outputs.should_build == 'true'
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        branch: [ openwrt-24.10 ]
        arch:
          - aarch64_cortex-a53
        isTestOrFake:
          - ${{ needs.check.outputs.test_build == 'true' || needs.check.outputs.fake_build == 'true' }}
        exclude:
          - { isTestOrFake: true }
    container:
      image: openwrt/sdk:${{ matrix.arch }}-${{ matrix.branch }}
      options: --user root
    outputs:
      pkgver: ${{ steps.build.outputs.pkgver }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          repository: ${{ env.REPO_LNK }}
          path: zapret-openwrt


      - name: Setup OpenWrt SDK
        working-directory: /builder
        env:
          BRANCH: ${{ matrix.branch }}
        shell: bash
        run: |
          # gpg --verbose --recv-keys 0x1D53D1877742E911
          gpg --verbose --import <(wget -qO- 'https://git.openwrt.org/?p=keyring.git;a=blob_plain;f=gpg/0x1D53D1877742E911.asc')
          # disable check signatures
          sed -i 's/gpg --/#gpg --/g' setup.sh
          # disable cleanup keys
          sed -r -i 's/^rm.+//' setup.sh
          ./setup.sh
          ls -lh
          echo "PKGTYPE=ipk" >> $GITHUB_ENV
            
      - name: Update Makefiles to latest commits
        run: |
          cd zapret-openwrt
          TODAY=$(date +%Y%m%d)
          
          for mf in $(find . -type f -name "Makefile"); do
            if grep -q "^PKG_SOURCE_URL" "$mf"; then
              REPO_URL=$(grep -E "^PKG_SOURCE_URL.*=" "$mf" | sed -E 's/.*= *//')
              echo "üîÑ Updating $mf from $REPO_URL"

              case "$mf" in
                *zapret-ip2net/Makefile)
                  LATEST_COMMIT=$(git ls-remote "$REPO_URL" HEAD | cut -f1)
                  ;;
                *luci-app-zapret/Makefile)
                  LATEST_COMMIT=$(git ls-remote "$REPO_URL" master | cut -f1)
                  ;;
                *)
                  LATEST_COMMIT=$(git ls-remote "$REPO_URL" HEAD | cut -f1)
                  ;;
              esac

              TMPFILE=$(mktemp)
              curl -L "$REPO_URL/archive/$LATEST_COMMIT.tar.gz" -o "$TMPFILE"
              LATEST_HASH=$(sha256sum "$TMPFILE" | awk '{print $1}')
              rm -f "$TMPFILE"

              sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$LATEST_COMMIT/" "$mf"
              sed -i "s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$LATEST_HASH/" "$mf"
              # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –¥–ª—è PKG_VERSION
              sed -i "s/^PKG_VERSION:=.*/PKG_VERSION:=1.0.$TODAY/" "$mf" 

            elif grep -q "^PKG_VERSION" "$mf"; then
              echo "üîÑ Updating PKG_VERSION date in $mf"
              sed -i "s/^PKG_VERSION:=.*/PKG_VERSION:=1.0.$TODAY/" "$mf"
            fi

            echo "‚úÖ $mf updated:"
            grep -E "PKG_VERSION|PKG_SOURCE_VERSION|PKG_MIRROR_HASH" "$mf" || true
          done


      - name: Init packages
        id: init
        working-directory: '/builder'
        env:
          FAKE_BUILD: ${{ env.FAKE_BUILD == 'true' || env.TEST_BUILD == 'true' }}
          BUILD_DATE: ${{ needs.check.outputs.build_date }}
          ARCH: ${{ matrix.arch }}
          BRANCH: ${{ matrix.branch }}
          SIGN_KEY: ${{ secrets.SIGN_PRIVATE_KEY }}
          CCACHE_DIR: '/builder/.ccache'
        shell: bash
        run: |
          PKGDIR=$GITHUB_WORKSPACE/zapret-openwrt
          MKFN=$PKGDIR/luci-app-zapret/Makefile
          PKGVER=$( grep -s '^PKG_VERSION:=.*' $MKFN | cut -d'=' -f2 )
          echo "PKG_VERSION = $PKGVER"
          cp -vr $PKGDIR ./package/zapret-openwrt/
          
          mv feeds.conf.default feeds.conf
          sed -i -e 's|base.*\.git|base https://github.com/openwrt/openwrt.git|' feeds.conf
          sed -i -e 's|packages.*\.git|packages https://github.com/openwrt/packages.git|' feeds.conf
          sed -i -e 's|luci.*\.git|luci https://github.com/openwrt/luci.git|' feeds.conf
          mkdir -p ./logs
          
          if [ "$FAKE_BUILD" = "false" ]; then
              ./scripts/feeds update base packages luci
              ./scripts/feeds install -a
          fi
          echo "FAKE_BUILD=$FAKE_BUILD" >> $GITHUB_ENV
          echo "PKGVER=$PKGVER" >> $GITHUB_ENV
          echo "pkgver=$PKGVER" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build packages        
        id: build
        if: steps.init.outputs.status == 'success'
        working-directory: '/builder'
        env:
          BUILD_DATE: ${{ needs.check.outputs.build_date }}
          ARCH: ${{ matrix.arch }}
          BRANCH: ${{ matrix.branch }}
          SIGN_KEY: ${{ secrets.SIGN_PRIVATE_KEY }}
          CCACHE_DIR: '/builder/.ccache'
        shell: bash
        run: |
          MAKE_JOBS=$(($(nproc)+1))
          echo "$MAKE_JOBS thread compile"
          
          if [ "$FAKE_BUILD" = "false" ]; then
              make defconfig
              sed -i 's/CONFIG_LUCI_JSMIN=y/CONFIG_LUCI_JSMIN=n/g' .config
              echo "------------- .config BEG -------------------"
              cat .config
              echo "------------- .config END -------------------"
              if [ "$ARCH" = "$LUCI_ARCH" ]; then
                  PKGLIST=`echo package/zapret-openwrt/{zapret,zapret-tpws,zapret-mdig,zapret-ip2net,luci-app-zapret}/compile`
              else
                  PKGLIST=`echo package/zapret-openwrt/{zapret,zapret-tpws,zapret-mdig,zapret-ip2net}/compile`
              fi
              if [ "$MAX_SPEED" = "false" ]; then
                  make $PKGLIST V=s CONFIG_CCACHE=1 BUILD_LOG=1
              else
                  make -j$MAKE_JOBS $PKGLIST CONFIG_CCACHE=1
              fi
          else
              OUT_DIR=./bin/packages/dev_x/base
              mkdir -p $OUT_DIR
              touch $OUT_DIR/zapret_$PKGVER-$ARCH.ipk
              touch $OUT_DIR/luci-app-zapret_$PKGVER-all.ipk
          fi
          
          find ./bin/packages/*/base -type f ! -regex ".*\(zapret\).*\.ipk$" -delete
          
          OUTDIR=$GITHUB_WORKSPACE/$PKGTYPE-$ARCH
          mkdir -p $OUTDIR
          cp -R ./bin/packages/*/base/. $OUTDIR/
          ./staging_dir/host/bin/ccache --max-size=10M --show-stats
          
          echo "OUTDIR=$OUTDIR" >> $GITHUB_ENV
          echo "pkgver=$PKGVER" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Compress build logs
        if: always()
        env:
          ARCH: ${{ matrix.arch }}
          BRANCH: ${{ matrix.branch }}
          LOGS_DIR: '/builder/logs'
        run: |
          tar -cJvf logs-$BRANCH-$ARCH.tar.xz $LOGS_DIR

      - name: Upload packages
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@main
        with:
          path: ${{ env.OUTDIR }}
          name: zapret,ipk,${{ matrix.arch }}
          if-no-files-found: error

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          path: logs-*.tar.xz
          name: logs-${{ matrix.branch }}-${{ matrix.arch }}

  release:
      needs: [ check, build ]
      # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ 'should_build' == true
      if: needs.check.outputs.should_build == 'true'
      permissions:
        contents: write
      runs-on: ubuntu-latest
      steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: zapret,ipk,*

      - name: Prepare package files for release
        env:
          TAG: ${{ needs.check.outputs.tag }}
          DATE: ${{ needs.check.outputs.date }}
          BUILD_DATE: ${{ needs.check.outputs.build_date }}
          PKGVER: ${{ needs.build.outputs.pkgver }}
        run: |
          echo "------------- DIR BEG -------------------"
          ls -la
          echo "------------- DIR END -------------------"
          
          mkdir -p release_files
          
          find . -type f -name "*.ipk" | while read file; do
            arch=$(echo "$file" | grep -oP 'zapret,ipk,\K[^/]+')
            filename=$(basename "$file")

            base="${filename#${arch}_}"
            base="${base%_${arch}.ipk}"

            if [[ "$base" == luci-app-zapret* ]]; then
              new_filename="${base}_all.ipk"
            else
              new_filename="${base}_${arch}.ipk"
            fi

            echo "Copying $file to release_files/$new_filename"
            cp "$file" "release_files/$new_filename"
          done
          
          echo "Files prepared for release:"
          ls -lh ./release_files/

      - name: Create or Update Release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: ${{ env.TEST_BUILD == 'true' || env.FAKE_BUILD == 'true' }}
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥ –∏–∑ Upstream, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ –∑–∞–¥–∞—á–µ 'check'
          tag_name: ${{ needs.check.outputs.tag }}${{ env.TAG_SUFFIX }} 
          name: zapret ${{ needs.check.outputs.tag }}
          body: |
            Built from upstream release: ${{ needs.check.outputs.tag }}
            Upstream Release Link: ${{ needs.check.outputs.url }}
          files: ./release_files/*
